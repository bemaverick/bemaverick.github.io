{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","props","state","userName","sessionStorage","getItem","uid","messageIsFetched","handleNewUserMessage","message","sendMessageToServer","setUserName","Math","random","Date","now","setState","setItem","store","add","text","timestamp","app","initializeApp","firebase","collection","signInAnonymously","this","orderBy","onSnapshot","querySnapshot","docChanges","forEach","change","doc","data","addUserMessage","addResponseMessage","error","console","log","className","subtitle","senderPlaceHolder","href","target","onClick","toggleWidget","youtubeId","React","Component","Youtube","id","src","frameBorder","allow","allowFullScreen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0WAOMA,G,MAAiB,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAGHC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,MAAQ,CACNC,SAAUC,eAAeC,QAAQ,aAAe,GAChDC,IAAKF,eAAeC,QAAQ,OAC5BE,kBAAkB,GAXD,EAmCnBC,qBAAuB,SAACC,GACD,EAAKP,MAAlBC,SAKN,EAAKO,oBAAoBD,GAFzB,EAAKE,YAAYF,IAvCF,EA6CnBE,YAAc,SAACR,GACb,IAAMG,EAAG,UAAOH,EAAP,YAAmBS,KAAKC,SAAxB,YAAoCC,KAAKC,OAClD,EAAKC,SAAS,CAAEb,WAAUG,QAC1BF,eAAea,QAAQ,WAAYd,GACnCC,eAAea,QAAQ,MAAOX,IAjDb,EAoDnBI,oBAAsB,SAACD,GAAa,IAAD,EACP,EAAKP,MAAvBC,EADyB,EACzBA,SAAUG,EADe,EACfA,IAClB,EAAKY,MAAMC,IAAI,CACbb,MACAH,WACAiB,KAAMX,EACNY,UAAWP,KAAKC,SAxDlBO,IAAIC,cAAc/B,GAClB,EAAK0B,MAAQM,cAAqBC,WAAW,YAH5B,E,sNAeXD,SAAgBE,oB,OAEtBC,KAAKT,MACFU,QAAQ,YAAa,OACrBC,YAAW,SAACC,GACXA,EAAcC,aAAaC,SAAQ,SAAAC,GACjC,IAAMxB,EAAUwB,EAAOC,IAAIC,OACvB1B,GAAWA,EAAQH,MAAQ,EAAKJ,MAAMI,MAAQ,EAAKJ,MAAMK,kBAC3D6B,yBAAe3B,EAAQW,MAErBX,GAAWA,EAAQH,MAAQ,EAAKJ,MAAMI,KACxC+B,6BAAmB,IAAD,OAAK5B,EAAQN,SAAb,eAA4BM,EAAQW,UAG1D,EAAKJ,SAAS,CAAET,kBAAkB,OACjC,SAAC+B,GACFC,QAAQC,IAAIF,M,qIA+BP,IACDnC,EAAawB,KAAKzB,MAAlBC,SACR,OACE,yBAAKsC,UAAU,aACb,kBAAC,SAAD,CACEC,SAAU,mBACVC,kBAAmBxC,EAAQ,UAAMA,EAAN,uBAAsC,YACjEK,qBAAsBmB,KAAKnB,uBAG7B,yBAAKiC,UAAU,UACb,uBAAGG,KAAK,iCAAiCC,OAAO,UAAhD,qBACA,uBAAGD,KAAK,2DAA2DC,OAAO,UAA1E,cACA,4BAAQC,QAASC,eAAcF,OAAO,UAAtC,eACA,uBAAGD,KAAK,oDAAoDC,OAAO,UAAnE,iBACA,2DAEF,yBAAKJ,UAAU,OACb,kBAAC,EAAD,CACEO,UAAW,gBAEb,kBAAC,EAAD,CACEA,UAAW,gBAEb,kBAAC,EAAD,CACEA,UAAW,gBAEb,kBAAC,EAAD,CACEA,UAAW,iBAIf,yBAAKP,UAAU,OACb,kBAAC,EAAD,CACEO,UAAW,gBAEb,kBAAC,EAAD,CACEA,UAAW,gBAEb,kBAAC,EAAD,CACEA,UAAW,gBAEb,kBAAC,EAAD,CACEA,UAAW,sB,GA1GLC,IAAMC,WAmHlBC,EAAU,SAAC,GAAmB,IADZC,EACLJ,EAAgB,EAAhBA,UACjB,OACE,yBAAKP,UAAU,SACb,6BACE,4BACEY,KANcD,EAMMJ,EANP,wCAA0CI,EAA1C,iCAObE,YAAY,IACZC,MAAM,6BACNC,iBAAe,OAOVxD,ICvIKyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4cfec15f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport app from 'firebase/app';\nimport * as firebase from 'firebase';\nimport { Widget, addResponseMessage, addUserMessage, toggleWidget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAsIHuK7Ch5nIKJ_FvSO1wDx9duVVmD-Ak\",\n  authDomain: \"competitionchat.firebaseapp.com\",\n  databaseURL: \"https://competitionchat.firebaseio.com\",\n  projectId: \"competitionchat\",\n  storageBucket: \"competitionchat.appspot.com\",\n  messagingSenderId: \"750085230345\",\n  appId: \"1:750085230345:web:7b37022d91cb776e268dd8\"\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    app.initializeApp(firebaseConfig);\n    this.store = firebase.firestore().collection(\"messages\");\n  }\n\n\n\n  state = {\n    userName: sessionStorage.getItem(\"userName\") || \"\",\n    uid: sessionStorage.getItem(\"uid\"),\n    messageIsFetched: false\n  };\n\n  async componentDidMount() {\n    await firebase.auth().signInAnonymously();\n\n    this.store\n      .orderBy(\"timestamp\", \"asc\")\n      .onSnapshot((querySnapshot) => {\n        querySnapshot.docChanges().forEach(change => {\n          const message = change.doc.data();\n          if (message && message.uid === this.state.uid && !this.state.messageIsFetched) {\n            addUserMessage(message.text);\n          }\n          if (message && message.uid !== this.state.uid) {\n            addResponseMessage(`(${message.userName}):  ${message.text}`);\n          }\n        });\n        this.setState({ messageIsFetched: true });\n      }, (error) => {\n        console.log(error)\n      })\n  }\n\n  handleNewUserMessage = (message) => {\n    const { userName } = this.state;\n\n    if (!userName) {\n      this.setUserName(message);\n    } else {\n      this.sendMessageToServer(message);\n    }\n  };\n\n  setUserName = (userName) => {\n    const uid =  `${userName}_${Math.random()}_${Date.now()}`;\n    this.setState({ userName, uid });\n    sessionStorage.setItem(\"userName\", userName);\n    sessionStorage.setItem(\"uid\", uid)\n  };\n\n  sendMessageToServer = (message) => {\n    const { userName, uid } = this.state;\n    this.store.add({\n      uid,\n      userName,\n      text: message,\n      timestamp: Date.now()\n    });\n  };\n\n  render () {\n    const { userName } = this.state;\n    return (\n      <div className='container'>\n        <Widget\n          subtitle={'Competition chat'}\n          senderPlaceHolder={userName ? `${userName}: Type a message...` : \"Your Name\" }\n          handleNewUserMessage={this.handleNewUserMessage}\n        />\n\n        <div className='header'>\n          <a href=\"https://t.me/ArmwrestlingGroup\" target=\"_blank\">Telegram channel </a>\n          <a href=\"https://www.youtube.com/channel/UCONba2gMK9iHfvJ2cCKstDw\" target=\"_blank\">YT channel</a>\n          <button onClick={toggleWidget} target=\"_blank\">Online chat</button>\n          <a href=\"http://www.waf-armwrestling.com/event/worlds2019/\" target=\"_blank\">SÐ¡HEDULE</a>\n          <a>Mail: sergomen153@gmail.com</a>\n        </div>\n        <div className=\"row\">\n          <Youtube\n            youtubeId={\"rMT6gx5HvL4\"}\n          />\n          <Youtube\n            youtubeId={\"rMT6gx5HvL4\"}\n          />\n          <Youtube\n            youtubeId={\"rMT6gx5HvL4\"}\n          />\n          <Youtube\n            youtubeId={\"rMT6gx5HvL4\"}\n          />\n        </div>\n\n        <div className=\"row\">\n          <Youtube\n            youtubeId={\"rMT6gx5HvL4\"}\n          />\n          <Youtube\n            youtubeId={\"rMT6gx5HvL4\"}\n          />\n          <Youtube\n            youtubeId={\"rMT6gx5HvL4\"}\n          />\n          <Youtube\n            youtubeId={\"rMT6gx5HvL4\"}\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\nconst getYouTubeLing = (id) => (`https://www.youtube.com/embed/${id}?autoplay1=1&allow=autoplay1`);\nconst Youtube = ({ youtubeId }) => {\n  return (\n    <div className=\"block\">\n      <div>\n        <iframe\n          src={getYouTubeLing(youtubeId)}\n          frameBorder=\"0\"\n          allow=\"autoplay1; encrypted-media\"\n          allowFullScreen\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}